"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("boardItems"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("events"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("boardItems"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("boardItems"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("wagers"),angular.module("boardItems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listBoardItems",{url:"/boardItems/:groupId/:eventId",templateUrl:"modules/boardItems/views/list-boardItems.client.view.html"}).state("viewBoardItem",{url:"/boardItem/:boardItemId/:groupId",templateUrl:"modules/boardItems/views/view-boardItem.client.view.html"})}]),angular.module("boardItems").controller("BoardItemsController",["$scope","$stateParams","$location","Authentication","BoardItems",function($scope,$stateParams,$location,Authentication,BoardItems){$scope.authentication=Authentication,$scope.create=function(){var boardItem=new BoardItems({amount:this.amount});boardItem.$save(function(response){$location.path("boardItems/"+response._id),$scope.amount=0},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){var eventId=document.URL.split("/")[6];$scope.boardItems=BoardItems.query({eventId:eventId},function(){document.getElementById("loadingMessage").innerText=""})},$scope.findOne=function(){$scope.boardItem=BoardItems.get({boardItemId:$stateParams.boardItemId})}}]),angular.module("boardItems").factory("BoardItems",["$resource",function($resource){return $resource("boardItems/:boardItemId",{boardItemId:"@_id"},{})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("events").config(["$stateProvider",function($stateProvider){$stateProvider.state("listEvents",{url:"/events/:groupId",templateUrl:"modules/events/views/list-events.client.view.html"})}]),angular.module("events").controller("EventsController",["$scope","$stateParams","$location","$http","Authentication","Events",function($scope,$stateParams,$location,$http,Authentication,Events){$scope.authentication=Authentication,$scope.find=function(){$scope.events=Events.query()},$scope.findByGroup=function(groupId){groupId=document.URL.split("/")[5],$http.get("/events/groupId/"+groupId).success(function(data){$scope.events=data}).error(function(){})}}]),angular.module("events").factory("Events",["$resource",function($resource){return $resource("events/:eventId",{eventId:"@_id"},{})}]),angular.module("groups").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Groups","groups","dropdown","/groups(/create)?"),Menus.addSubMenuItem("topbar","groups","All Groups","groups"),Menus.addSubMenuItem("topbar","groups","New Group","groups/create")}]),angular.module("groups").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGroups",{url:"/groups",templateUrl:"modules/groups/views/list-groups.client.view.html"}).state("createGroup",{url:"/groups/create",templateUrl:"modules/groups/views/create-group.client.view.html"}).state("viewGroup",{url:"/groups/:groupId",templateUrl:"modules/groups/views/view-group.client.view.html"}).state("joinGroup",{url:"/groups/join/:groupId",templateUrl:"modules/groups/views/view-group.client.view.html"}).state("editGroup",{url:"/groups/:groupId/edit",templateUrl:"modules/groups/views/edit-group.client.view.html"})}]),angular.module("groups").controller("GroupsController",["$scope","$stateParams","$location","$http","Authentication","Groups",function($scope,$stateParams,$location,$http,Authentication,Groups){$scope.authentication=Authentication,$scope.create=function(){var eventCheckboxes=document.getElementById("groupForm").events,checkedEvents=[];for(var i in eventCheckboxes){var checkbox=eventCheckboxes[i];checkbox.checked&&checkedEvents.push(checkbox.value)}var group=new Groups({title:this.title,description:this.description,endDate:this.endDate,startDate:this.startDate,bankroll:this.bankroll,events:checkedEvents,maxBet:this.maxBet});group.$save(function(response){$location.path("groups/"+response._id),$scope.title="",$scope.description="",$scope.bankroll=0},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(group){if(group){group.$remove();for(var i in $scope.groups)$scope.groups[i]===group&&$scope.groups.splice(i,1)}else $scope.group.$remove(function(){$location.path("groups")})},$scope.update=function(){var group=$scope.group;group.$update(function(){$location.path("groups/"+group._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.groups=Groups.query()},$scope.findOne=function(){$scope.group=Groups.get({groupId:$stateParams.groupId})},$scope.joinGroup=function(group){var group=$scope.group;group.$joinGroup(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.getPlayerCount=function(){var group=$scope.group;return group&&group.players?group.players.length:0},$scope.getEvents=function(){$http.get("/events").success(function(data){$scope.stockEvents=data}).error(function(){})}}]),angular.module("groups").factory("Groups",["$resource",function($resource){return $resource("groups/:groupId",{groupId:"@_id"},{update:{method:"PUT"},joinGroup:{method:"PUT"},userInGroup:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("wagers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listWagers",{url:"/wagers/:groupId",templateUrl:"modules/wagers/views/list-wagers.client.view.html"}).state("createWager",{url:"/wagers/create/:boardItemId/:groupId",templateUrl:"modules/wagers/views/create-wager.client.view.html"}).state("viewWager",{url:"/wagers/:wagerId/:boardItemId/:groupId",templateUrl:"modules/wagers/views/view-wager.client.view.html"})}]),angular.module("wagers").controller("WagersController",["$scope","$stateParams","$location","Authentication","Wagers",function($scope,$stateParams,$location,Authentication,Wagers){$scope.authentication=Authentication,$scope.create=function(){var wager=new Wagers({amount:this.amount,boardItem:$stateParams.boardItemId,group:$stateParams.groupId});wager.$save(function(){$location.path("groups/"+$stateParams.groupId),$scope.amount=0},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.wagers=Wagers.query({group:$stateParams.groupId})},$scope.findOne=function(){$scope.wager=Wagers.get({wagerId:$stateParams.wagerId})},$scope.winnings="",$scope.pay="",$scope.onAmountChanged=function(){if(this.amount>0){var juice=document.getElementById("itemJuice").innerText;juice=juice.trim();var slashPosition=juice.indexOf("/");if("EVEN"===juice)$scope.winnings=this.amount;else if(slashPosition>0){var theOdds=parseFloat(juice);$scope.winnings=this.amount*theOdds}else if("+"==juice[0]){juice=parseInt(juice);var conversion=juice/100;$scope.winnings=conversion*this.amount}else{juice=parseInt(juice.substring(1));var conversion=1/(juice/100);$scope.winnings=conversion*this.amount}$scope.pay=this.amount+$scope.winnings,$scope.pay=parseFloat($scope.pay).toFixed(2),$scope.winnings=parseFloat($scope.winnings).toFixed(2)}else $scope.pay="",$scope.winnings=""}}]),angular.module("wagers").factory("Wagers",["$resource",function($resource){return $resource("wagers/:wagerId",{wagerId:"@_id"},{update:{method:"PUT"},placeWager:{method:"PUT"}})}]);